#pragma once

#include <stdint.h>
#include <epaper_weact.h>

struct GFXglyph
{
    uint16_t bitmapOffset;
    uint8_t width;
    uint8_t height;
    uint8_t xAdvance;
    int8_t xOffset;
    int8_t yOffset;
};

struct GFXfont
{
    uint8_t *bitmap;
    GFXglyph *glyph;
    uint16_t first;
    uint16_t last;
    uint8_t yAdvance;
};

const uint8_t FreeMono12pt7bBitmaps[] = {
    0x49, 0x24, 0x92, 0x48, 0x01, 0xF8, 0xE7, 0xE7, 0x67, 0x42, 0x42, 0x42,
    0x42, 0x09, 0x02, 0x41, 0x10, 0x44, 0x11, 0x1F, 0xF1, 0x10, 0x4C, 0x12,
    0x3F, 0xE1, 0x20, 0x48, 0x12, 0x04, 0x81, 0x20, 0x48, 0x04, 0x07, 0xA2,
    0x19, 0x02, 0x40, 0x10, 0x03, 0x00, 0x3C, 0x00, 0x80, 0x10, 0x06, 0x01,
    0xE0, 0xA7, 0xC0, 0x40, 0x10, 0x04, 0x00, 0x3C, 0x19, 0x84, 0x21, 0x08,
    0x66, 0x0F, 0x00, 0x0C, 0x1C, 0x78, 0x01, 0xE0, 0xCC, 0x21, 0x08, 0x43,
    0x30, 0x78, 0x3E, 0x30, 0x10, 0x08, 0x02, 0x03, 0x03, 0x47, 0x14, 0x8A,
    0x43, 0x11, 0x8F, 0x60, 0xFD, 0xA4, 0x90, 0x05, 0x25, 0x24, 0x92, 0x48,
    0x92, 0x24, 0x11, 0x24, 0x89, 0x24, 0x92, 0x92, 0x90, 0x00, 0x04, 0x02,
    0x11, 0x07, 0xF0, 0xC0, 0x50, 0x48, 0x42, 0x00, 0x08, 0x04, 0x02, 0x01,
    0x00, 0x87, 0xFC, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x3B, 0x9C, 0xCE,
    0x62, 0x00, 0xFF, 0xE0, 0xFF, 0x80, 0x00, 0x80, 0xC0, 0x40, 0x20, 0x20,
    0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x01, 0x01, 0x00, 0x80,
    0x80, 0x40, 0x00, 0x1C, 0x31, 0x90, 0x58, 0x38, 0x0C, 0x06, 0x03, 0x01,
    0x80, 0xC0, 0x60, 0x30, 0x34, 0x13, 0x18, 0x70, 0x30, 0xE1, 0x44, 0x81,
    0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x81, 0x1F, 0xC0, 0x1E, 0x10, 0x90,
    0x68, 0x10, 0x08, 0x0C, 0x04, 0x04, 0x04, 0x06, 0x06, 0x06, 0x06, 0x0E,
    0x07, 0xFE, 0x3E, 0x10, 0x40, 0x08, 0x02, 0x00, 0x80, 0x40, 0xE0, 0x04,
    0x00, 0x80, 0x10, 0x04, 0x01, 0x00, 0xD8, 0x63, 0xE0, 0x06, 0x0A, 0x0A,
    0x12, 0x22, 0x22, 0x42, 0x42, 0x82, 0x82, 0xFF, 0x02, 0x02, 0x02, 0x0F,
    0x7F, 0x20, 0x10, 0x08, 0x04, 0x02, 0xF1, 0x8C, 0x03, 0x00, 0x80, 0x40,
    0x20, 0x18, 0x16, 0x18, 0xF0, 0x0F, 0x8C, 0x08, 0x08, 0x04, 0x04, 0x02,
    0x79, 0x46, 0xC1, 0xE0, 0x60, 0x28, 0x14, 0x19, 0x08, 0x78, 0xFF, 0x81,
    0x81, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08,
    0x08, 0x3E, 0x31, 0xB0, 0x70, 0x18, 0x0C, 0x05, 0x8C, 0x38, 0x63, 0x40,
    0x60, 0x30, 0x18, 0x1B, 0x18, 0xF8, 0x3C, 0x31, 0x30, 0x50, 0x28, 0x0C,
    0x0F, 0x06, 0x85, 0x3C, 0x80, 0x40, 0x40, 0x20, 0x20, 0x63, 0xE0, 0xFF,
    0x80, 0x07, 0xFC, 0x39, 0xCE, 0x00, 0x00, 0x06, 0x33, 0x98, 0xC4, 0x00,
    0x00, 0xC0, 0x60, 0x18, 0x0C, 0x06, 0x01, 0x80, 0x0C, 0x00, 0x60, 0x03,
    0x00, 0x30, 0x01, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0xC0, 0x06,
    0x00, 0x30, 0x01, 0x80, 0x18, 0x01, 0x80, 0xC0, 0x30, 0x18, 0x0C, 0x02,
    0x00, 0x00, 0x3E, 0x60, 0xA0, 0x20, 0x10, 0x08, 0x08, 0x18, 0x10, 0x08,
    0x00, 0x00, 0x00, 0x01, 0xC0, 0xE0, 0x1C, 0x31, 0x10, 0x50, 0x28, 0x14,
    0x3A, 0x25, 0x22, 0x91, 0x4C, 0xA3, 0xF0, 0x08, 0x02, 0x01, 0x80, 0x7C,
    0x3F, 0x00, 0x0C, 0x00, 0x48, 0x01, 0x20, 0x04, 0x40, 0x21, 0x00, 0x84,
    0x04, 0x08, 0x1F, 0xE0, 0x40, 0x82, 0x01, 0x08, 0x04, 0x20, 0x13, 0xE1,
    0xF0, 0xFF, 0x08, 0x11, 0x01, 0x20, 0x24, 0x04, 0x81, 0x1F, 0xC2, 0x06,
    0x40, 0x68, 0x05, 0x00, 0xA0, 0x14, 0x05, 0xFF, 0x00, 0x1E, 0x48, 0x74,
    0x05, 0x01, 0x80, 0x20, 0x08, 0x02, 0x00, 0x80, 0x20, 0x04, 0x01, 0x01,
    0x30, 0x87, 0xC0, 0xFE, 0x10, 0x44, 0x09, 0x02, 0x40, 0x50, 0x14, 0x05,
    0x01, 0x40, 0x50, 0x14, 0x0D, 0x02, 0x41, 0x3F, 0x80, 0xFF, 0xC8, 0x09,
    0x01, 0x20, 0x04, 0x00, 0x88, 0x1F, 0x02, 0x20, 0x40, 0x08, 0x01, 0x00,
    0xA0, 0x14, 0x03, 0xFF, 0xC0, 0xFF, 0xE8, 0x05, 0x00, 0xA0, 0x04, 0x00,
    0x88, 0x1F, 0x02, 0x20, 0x40, 0x08, 0x01, 0x00, 0x20, 0x04, 0x01, 0xF0,
    0x00, 0x1F, 0x46, 0x19, 0x01, 0x60, 0x28, 0x01, 0x00, 0x20, 0x04, 0x00,
    0x83, 0xF0, 0x0B, 0x01, 0x20, 0x23, 0x0C, 0x3E, 0x00, 0xE1, 0xD0, 0x24,
    0x09, 0x02, 0x40, 0x90, 0x27, 0xF9, 0x02, 0x40, 0x90, 0x24, 0x09, 0x02,
    0x40, 0xB8, 0x70, 0xFE, 0x20, 0x40, 0x81, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x81, 0x1F, 0xC0, 0x0F, 0xE0, 0x10, 0x02, 0x00, 0x40, 0x08, 0x01,
    0x00, 0x20, 0x04, 0x80, 0x90, 0x12, 0x02, 0x40, 0xC6, 0x30, 0x7C, 0x00,
    0xF1, 0xE4, 0x0C, 0x41, 0x04, 0x20, 0x44, 0x04, 0x80, 0x5C, 0x06, 0x60,
    0x43, 0x04, 0x10, 0x40, 0x84, 0x08, 0x40, 0xCF, 0x07, 0xF8, 0x04, 0x00,
    0x80, 0x10, 0x02, 0x00, 0x40, 0x08, 0x01, 0x00, 0x20, 0x04, 0x04, 0x80,
    0x90, 0x12, 0x03, 0xFF, 0xC0, 0xE0, 0x3B, 0x01, 0x94, 0x14, 0xA0, 0xA4,
    0x89, 0x24, 0x49, 0x14, 0x48, 0xA2, 0x45, 0x12, 0x10, 0x90, 0x04, 0x80,
    0x24, 0x01, 0x78, 0x3C, 0xE0, 0xF6, 0x02, 0x50, 0x25, 0x02, 0x48, 0x24,
    0xC2, 0x44, 0x24, 0x22, 0x43, 0x24, 0x12, 0x40, 0xA4, 0x0A, 0x40, 0x6F,
    0x06, 0x0F, 0x03, 0x0C, 0x60, 0x64, 0x02, 0x80, 0x18, 0x01, 0x80, 0x18,
    0x01, 0x80, 0x18, 0x01, 0x40, 0x26, 0x06, 0x30, 0xC0, 0xF0, 0xFF, 0x10,
    0x64, 0x05, 0x01, 0x40, 0x50, 0x34, 0x19, 0xFC, 0x40, 0x10, 0x04, 0x01,
    0x00, 0x40, 0x3E, 0x00, 0x0F, 0x03, 0x0C, 0x60, 0x64, 0x02, 0x80, 0x18,
    0x01, 0x80, 0x18, 0x01, 0x80, 0x18, 0x01, 0x40, 0x26, 0x06, 0x30, 0xC1,
    0xF0, 0x0C, 0x01, 0xF1, 0x30, 0xE0, 0xFF, 0x04, 0x18, 0x40, 0xC4, 0x04,
    0x40, 0x44, 0x0C, 0x41, 0x87, 0xE0, 0x43, 0x04, 0x10, 0x40, 0x84, 0x04,
    0x40, 0x4F, 0x03, 0x1F, 0x48, 0x34, 0x05, 0x01, 0x40, 0x08, 0x01, 0xC0,
    0x0E, 0x00, 0x40, 0x18, 0x06, 0x01, 0xE1, 0xA7, 0xC0, 0xFF, 0xF0, 0x86,
    0x10, 0x82, 0x00, 0x40, 0x08, 0x01, 0x00, 0x20, 0x04, 0x00, 0x80, 0x10,
    0x02, 0x00, 0x40, 0x7F, 0x00, 0xF0, 0xF4, 0x02, 0x40, 0x24, 0x02, 0x40,
    0x24, 0x02, 0x40, 0x24, 0x02, 0x40, 0x24, 0x02, 0x40, 0x22, 0x04, 0x30,
    0xC0, 0xF0, 0xF8, 0x7C, 0x80, 0x22, 0x01, 0x04, 0x04, 0x10, 0x20, 0x40,
    0x80, 0x82, 0x02, 0x10, 0x08, 0x40, 0x11, 0x00, 0x48, 0x01, 0xA0, 0x03,
    0x00, 0x0C, 0x00, 0xF8, 0x7C, 0x80, 0x22, 0x00, 0x88, 0xC2, 0x23, 0x10,
    0x8E, 0x42, 0x29, 0x09, 0x24, 0x24, 0x90, 0x91, 0x41, 0x85, 0x06, 0x14,
    0x18, 0x70, 0x60, 0x80, 0xF0, 0xF2, 0x06, 0x30, 0x41, 0x08, 0x09, 0x80,
    0x50, 0x06, 0x00, 0x60, 0x0D, 0x00, 0x88, 0x10, 0xC2, 0x04, 0x60, 0x2F,
    0x0F, 0xF0, 0xF2, 0x02, 0x10, 0x41, 0x04, 0x08, 0x80, 0x50, 0x05, 0x00,
    0x20, 0x02, 0x00, 0x20, 0x02, 0x00, 0x20, 0x02, 0x01, 0xFC, 0xFF, 0x40,
    0xA0, 0x90, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x10, 0x50, 0x30, 0x18,
    0x0F, 0xFC, 0xF2, 0x49, 0x24, 0x92, 0x49, 0x24, 0x9C, 0x80, 0x60, 0x10,
    0x08, 0x02, 0x01, 0x00, 0x40, 0x20, 0x08, 0x04, 0x01, 0x00, 0x80, 0x20,
    0x10, 0x04, 0x02, 0x00, 0x80, 0x40, 0xE4, 0x92, 0x49, 0x24, 0x92, 0x49,
    0x3C, 0x08, 0x0C, 0x09, 0x0C, 0x4C, 0x14, 0x04, 0xFF, 0xFC, 0x84, 0x21,
    0x3E, 0x00, 0x60, 0x08, 0x02, 0x3F, 0x98, 0x28, 0x0A, 0x02, 0xC3, 0x9F,
    0x30, 0xE0, 0x01, 0x00, 0x08, 0x00, 0x40, 0x02, 0x00, 0x13, 0xE0, 0xA0,
    0x86, 0x02, 0x20, 0x09, 0x00, 0x48, 0x02, 0x40, 0x13, 0x01, 0x14, 0x1B,
    0x9F, 0x00, 0x1F, 0x4C, 0x19, 0x01, 0x40, 0x28, 0x01, 0x00, 0x20, 0x02,
    0x00, 0x60, 0x43, 0xF0, 0x00, 0xC0, 0x08, 0x01, 0x00, 0x20, 0x04, 0x3C,
    0x98, 0x52, 0x06, 0x80, 0x50, 0x0A, 0x01, 0x40, 0x24, 0x0C, 0xC2, 0x87,
    0x98, 0x3F, 0x18, 0x68, 0x06, 0x01, 0xFF, 0xE0, 0x08, 0x03, 0x00, 0x60,
    0xC7, 0xC0, 0x0F, 0x98, 0x08, 0x04, 0x02, 0x07, 0xF8, 0x80, 0x40, 0x20,
    0x10, 0x08, 0x04, 0x02, 0x01, 0x03, 0xF8, 0x1E, 0x6C, 0x39, 0x03, 0x40,
    0x28, 0x05, 0x00, 0xA0, 0x12, 0x06, 0x61, 0x43, 0xC8, 0x01, 0x00, 0x20,
    0x08, 0x3E, 0x00, 0xC0, 0x10, 0x04, 0x01, 0x00, 0x40, 0x13, 0x87, 0x11,
    0x82, 0x40, 0x90, 0x24, 0x09, 0x02, 0x40, 0x90, 0x2E, 0x1C, 0x08, 0x04,
    0x02, 0x00, 0x00, 0x03, 0xC0, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00,
    0x80, 0x43, 0xFE, 0x04, 0x08, 0x10, 0x00, 0x1F, 0xC0, 0x81, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x81, 0x02, 0x0B, 0xE0, 0xE0, 0x02, 0x00, 0x20,
    0x02, 0x00, 0x20, 0x02, 0x3C, 0x21, 0x02, 0x60, 0x2C, 0x03, 0x80, 0x24,
    0x02, 0x20, 0x21, 0x02, 0x08, 0xE1, 0xF0, 0x78, 0x04, 0x02, 0x01, 0x00,
    0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x80, 0x43, 0xFE,
    0xDC, 0xE3, 0x19, 0x90, 0x84, 0x84, 0x24, 0x21, 0x21, 0x09, 0x08, 0x48,
    0x42, 0x42, 0x17, 0x18, 0xC0, 0x67, 0x83, 0x84, 0x20, 0x22, 0x02, 0x20,
    0x22, 0x02, 0x20, 0x22, 0x02, 0x20, 0x2F, 0x07, 0x1F, 0x04, 0x11, 0x01,
    0x40, 0x18, 0x03, 0x00, 0x60, 0x0A, 0x02, 0x20, 0x83, 0xE0, 0xCF, 0x85,
    0x06, 0x60, 0x24, 0x01, 0x40, 0x14, 0x01, 0x40, 0x16, 0x02, 0x50, 0x44,
    0xF8, 0x40, 0x04, 0x00, 0x40, 0x0F, 0x00, 0x1E, 0x6C, 0x3B, 0x03, 0x40,
    0x28, 0x05, 0x00, 0xA0, 0x12, 0x06, 0x61, 0x43, 0xC8, 0x01, 0x00, 0x20,
    0x04, 0x03, 0xC0, 0xE3, 0x8B, 0x13, 0x80, 0x80, 0x20, 0x08, 0x02, 0x00,
    0x80, 0x20, 0x3F, 0x80, 0x1F, 0x58, 0x34, 0x05, 0x80, 0x1E, 0x00, 0x60,
    0x06, 0x01, 0xC0, 0xAF, 0xC0, 0x20, 0x04, 0x00, 0x80, 0x10, 0x0F, 0xF0,
    0x40, 0x08, 0x01, 0x00, 0x20, 0x04, 0x00, 0x80, 0x10, 0x03, 0x04, 0x3F,
    0x00, 0xC1, 0xC8, 0x09, 0x01, 0x20, 0x24, 0x04, 0x80, 0x90, 0x12, 0x02,
    0x61, 0xC7, 0xCC, 0xF8, 0xF9, 0x01, 0x08, 0x10, 0x60, 0x81, 0x08, 0x08,
    0x40, 0x22, 0x01, 0x20, 0x05, 0x00, 0x30, 0x00, 0xF0, 0x7A, 0x01, 0x10,
    0x08, 0x8C, 0x42, 0x62, 0x12, 0x90, 0xA5, 0x05, 0x18, 0x28, 0xC0, 0x86,
    0x00, 0x78, 0xF3, 0x04, 0x18, 0x80, 0xD0, 0x06, 0x00, 0x70, 0x09, 0x81,
    0x0C, 0x20, 0x6F, 0x8F, 0xF0, 0xF2, 0x02, 0x20, 0x41, 0x04, 0x10, 0x80,
    0x88, 0x09, 0x00, 0x50, 0x06, 0x00, 0x20, 0x04, 0x00, 0x40, 0x08, 0x0F,
    0xE0, 0xFF, 0x41, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0xBF,
    0xC0, 0x19, 0x08, 0x42, 0x10, 0x84, 0x64, 0x18, 0x42, 0x10, 0x84, 0x20,
    0xC0, 0xFF, 0xFF, 0xC0, 0xC1, 0x08, 0x42, 0x10, 0x84, 0x10, 0x4C, 0x42,
    0x10, 0x84, 0x26, 0x00, 0x38, 0x13, 0x38, 0x38};

const GFXglyph FreeMono12pt7bGlyphs[] = {
    {0, 0, 0, 14, 0, 1},        // 0x20 ' '
    {0, 3, 15, 14, 6, -14},     // 0x21 '!'
    {6, 8, 7, 14, 3, -14},      // 0x22 '"'
    {13, 10, 16, 14, 2, -14},   // 0x23 '#'
    {33, 10, 17, 14, 2, -14},   // 0x24 '$'
    {55, 10, 15, 14, 2, -14},   // 0x25 '%'
    {74, 9, 12, 14, 3, -11},    // 0x26 '&'
    {88, 3, 7, 14, 5, -14},     // 0x27 '''
    {91, 3, 18, 14, 7, -14},    // 0x28 '('
    {98, 3, 18, 14, 4, -14},    // 0x29 ')'
    {105, 9, 9, 14, 3, -14},    // 0x2A '*'
    {116, 9, 11, 14, 3, -11},   // 0x2B '+'
    {129, 5, 7, 14, 3, -3},     // 0x2C ','
    {134, 11, 1, 14, 2, -6},    // 0x2D '-'
    {136, 3, 3, 14, 5, -2},     // 0x2E '.'
    {138, 9, 18, 14, 3, -15},   // 0x2F '/'
    {159, 9, 15, 14, 3, -14},   // 0x30 '0'
    {176, 7, 14, 14, 4, -13},   // 0x31 '1'
    {189, 9, 15, 14, 2, -14},   // 0x32 '2'
    {206, 10, 15, 14, 2, -14},  // 0x33 '3'
    {225, 8, 15, 14, 3, -14},   // 0x34 '4'
    {240, 9, 15, 14, 3, -14},   // 0x35 '5'
    {257, 9, 15, 14, 3, -14},   // 0x36 '6'
    {274, 8, 15, 14, 3, -14},   // 0x37 '7'
    {289, 9, 15, 14, 3, -14},   // 0x38 '8'
    {306, 9, 15, 14, 3, -14},   // 0x39 '9'
    {323, 3, 10, 14, 5, -9},    // 0x3A ':'
    {327, 5, 13, 14, 3, -9},    // 0x3B ';'
    {336, 11, 11, 14, 2, -11},  // 0x3C '<'
    {352, 12, 4, 14, 1, -8},    // 0x3D '='
    {358, 11, 11, 14, 2, -11},  // 0x3E '>'
    {374, 9, 14, 14, 3, -13},   // 0x3F '?'
    {390, 9, 16, 14, 3, -14},   // 0x40 '@'
    {408, 14, 14, 14, 0, -13},  // 0x41 'A'
    {433, 11, 14, 14, 2, -13},  // 0x42 'B'
    {453, 10, 14, 14, 2, -13},  // 0x43 'C'
    {471, 10, 14, 14, 2, -13},  // 0x44 'D'
    {489, 11, 14, 14, 2, -13},  // 0x45 'E'
    {509, 11, 14, 14, 2, -13},  // 0x46 'F'
    {529, 11, 14, 14, 2, -13},  // 0x47 'G'
    {549, 10, 14, 14, 2, -13},  // 0x48 'H'
    {567, 7, 14, 14, 4, -13},   // 0x49 'I'
    {580, 11, 14, 14, 2, -13},  // 0x4A 'J'
    {600, 12, 14, 14, 2, -13},  // 0x4B 'K'
    {621, 11, 14, 14, 2, -13},  // 0x4C 'L'
    {641, 13, 14, 14, 1, -13},  // 0x4D 'M'
    {664, 12, 14, 14, 1, -13},  // 0x4E 'N'
    {685, 12, 14, 14, 1, -13},  // 0x4F 'O'
    {706, 10, 14, 14, 2, -13},  // 0x50 'P'
    {724, 12, 17, 14, 1, -13},  // 0x51 'Q'
    {750, 12, 14, 14, 2, -13},  // 0x52 'R'
    {771, 10, 14, 14, 2, -13},  // 0x53 'S'
    {789, 11, 14, 14, 2, -13},  // 0x54 'T'
    {809, 12, 14, 14, 1, -13},  // 0x55 'U'
    {830, 14, 14, 14, 0, -13},  // 0x56 'V'
    {855, 14, 14, 14, 0, -13},  // 0x57 'W'
    {880, 12, 14, 14, 1, -13},  // 0x58 'X'
    {901, 12, 14, 14, 1, -13},  // 0x59 'Y'
    {922, 9, 14, 14, 3, -13},   // 0x5A 'Z'
    {938, 3, 18, 14, 7, -14},   // 0x5B '['
    {945, 9, 18, 14, 3, -15},   // 0x5C '\'
    {966, 3, 18, 14, 5, -14},   // 0x5D ']'
    {973, 9, 6, 14, 3, -14},    // 0x5E '^'
    {980, 14, 1, 14, 0, 3},     // 0x5F '_'
    {982, 4, 4, 14, 4, -15},    // 0x60 '`'
    {984, 10, 10, 14, 2, -9},   // 0x61 'a'
    {997, 13, 15, 14, 0, -14},  // 0x62 'b'
    {1022, 11, 10, 14, 2, -9},  // 0x63 'c'
    {1036, 11, 15, 14, 2, -14}, // 0x64 'd'
    {1057, 10, 10, 14, 2, -9},  // 0x65 'e'
    {1070, 9, 15, 14, 4, -14},  // 0x66 'f'
    {1087, 11, 14, 14, 2, -9},  // 0x67 'g'
    {1107, 10, 15, 14, 2, -14}, // 0x68 'h'
    {1126, 9, 15, 14, 3, -14},  // 0x69 'i'
    {1143, 7, 19, 14, 3, -14},  // 0x6A 'j'
    {1160, 12, 15, 14, 1, -14}, // 0x6B 'k'
    {1183, 9, 15, 14, 3, -14},  // 0x6C 'l'
    {1200, 13, 10, 14, 1, -9},  // 0x6D 'm'
    {1217, 12, 10, 14, 1, -9},  // 0x6E 'n'
    {1232, 11, 10, 14, 2, -9},  // 0x6F 'o'
    {1246, 12, 14, 14, 1, -9},  // 0x70 'p'
    {1267, 11, 14, 14, 2, -9},  // 0x71 'q'
    {1287, 10, 10, 14, 3, -9},  // 0x72 'r'
    {1300, 10, 10, 14, 2, -9},  // 0x73 's'
    {1313, 11, 14, 14, 1, -13}, // 0x74 't'
    {1333, 11, 10, 14, 2, -9},  // 0x75 'u'
    {1347, 13, 10, 14, 1, -9},  // 0x76 'v'
    {1364, 13, 10, 14, 1, -9},  // 0x77 'w'
    {1381, 12, 10, 14, 1, -9},  // 0x78 'x'
    {1396, 12, 14, 14, 1, -9},  // 0x79 'y'
    {1417, 9, 10, 14, 3, -9},   // 0x7A 'z'
    {1429, 5, 18, 14, 5, -14},  // 0x7B '{'
    {1441, 1, 18, 14, 7, -14},  // 0x7C '|'
    {1444, 5, 18, 14, 5, -14},  // 0x7D '}'
    {1456, 10, 3, 14, 2, -7}};  // 0x7E '~'

const GFXfont FreeMono12pt7b = {(uint8_t *)FreeMono12pt7bBitmaps,
                                        (GFXglyph *)FreeMono12pt7bGlyphs, 0x20,
                                        0x7E, 24};

// Approx. 2132 bytes

const uint8_t FreeMonoBoldOblique12pt7bBitmaps[] = {
    0x1C, 0xF3, 0xCE, 0x38, 0xE7, 0x1C, 0x61, 0x86, 0x00, 0x63, 0x8C, 0x00,
    0xE7, 0xE7, 0xE6, 0xC6, 0xC6, 0xC4, 0x84, 0x03, 0x30, 0x19, 0x81, 0xDC,
    0x0C, 0xE0, 0x66, 0x1F, 0xFC, 0xFF, 0xE1, 0x98, 0x0C, 0xC0, 0xEE, 0x06,
    0x70, 0xFF, 0xCF, 0xFE, 0x1D, 0xC0, 0xCC, 0x06, 0x60, 0x77, 0x03, 0x30,
    0x00, 0x01, 0x00, 0x70, 0x0C, 0x07, 0xF1, 0xFE, 0x71, 0xCC, 0x11, 0x80,
    0x3F, 0x03, 0xF0, 0x0F, 0x20, 0x6E, 0x0D, 0xC3, 0x3F, 0xE7, 0xF8, 0x1C,
    0x03, 0x00, 0x60, 0x0C, 0x00, 0x0E, 0x03, 0xE0, 0xC4, 0x10, 0x82, 0x30,
    0x7C, 0x07, 0x78, 0x7C, 0x7F, 0x19, 0xF0, 0x62, 0x08, 0x41, 0x18, 0x3E,
    0x03, 0x80, 0x07, 0xC1, 0xF8, 0x62, 0x0C, 0x01, 0x80, 0x38, 0x0F, 0x03,
    0xF7, 0x6F, 0xD8, 0xF3, 0x1E, 0x7F, 0xE7, 0xF8, 0xFF, 0x6D, 0x20, 0x06,
    0x1C, 0x70, 0xC3, 0x06, 0x18, 0x30, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x30,
    0x70, 0x60, 0xC1, 0x00, 0x0C, 0x18, 0x38, 0x30, 0x60, 0xC1, 0x83, 0x06,
    0x0C, 0x30, 0x61, 0xC3, 0x0E, 0x38, 0x61, 0xC2, 0x00, 0x06, 0x00, 0xC0,
    0x18, 0x3F, 0x7F, 0xFE, 0xFF, 0x07, 0x81, 0xF8, 0x77, 0x0C, 0x60, 0x03,
    0x00, 0x70, 0x07, 0x00, 0x60, 0x06, 0x0F, 0xFF, 0xFF, 0xF0, 0xE0, 0x0C,
    0x00, 0xC0, 0x0C, 0x01, 0xC0, 0x18, 0x00, 0x1C, 0xE3, 0x1C, 0x63, 0x08,
    0x00, 0x7F, 0xFF, 0xFF, 0xC0, 0x7F, 0x00, 0x00, 0x08, 0x00, 0x70, 0x01,
    0x80, 0x0E, 0x00, 0x70, 0x03, 0x80, 0x0C, 0x00, 0x70, 0x03, 0x80, 0x0C,
    0x00, 0x70, 0x03, 0x80, 0x0C, 0x00, 0x70, 0x03, 0x80, 0x0C, 0x00, 0x70,
    0x03, 0x80, 0x0C, 0x00, 0x20, 0x00, 0x07, 0x83, 0xF8, 0xE3, 0x98, 0x37,
    0x06, 0xC0, 0xD8, 0x1B, 0x03, 0xE0, 0xF8, 0x1B, 0x03, 0x60, 0xEE, 0x38,
    0xFE, 0x0F, 0x00, 0x03, 0xC1, 0xF0, 0x7E, 0x0C, 0xC0, 0x38, 0x07, 0x00,
    0xC0, 0x18, 0x07, 0x00, 0xE0, 0x18, 0x03, 0x00, 0x61, 0xFF, 0xFF, 0xF0,
    0x03, 0xE0, 0x3F, 0x83, 0x8E, 0x38, 0x31, 0x81, 0x80, 0x18, 0x01, 0xC0,
    0x1C, 0x01, 0xC0, 0x38, 0x03, 0x80, 0x38, 0x47, 0x87, 0x3F, 0xF3, 0xFF,
    0x80, 0x07, 0xC1, 0xFF, 0x18, 0x70, 0x03, 0x00, 0x30, 0x06, 0x07, 0xC0,
    0x7C, 0x00, 0xE0, 0x06, 0x00, 0x60, 0x06, 0xC1, 0xCF, 0xF8, 0x7E, 0x00,
    0x01, 0xE0, 0x3C, 0x0F, 0x03, 0x60, 0xCC, 0x3B, 0x8E, 0x63, 0x8C, 0x61,
    0x9F, 0xFB, 0xFF, 0x01, 0x81, 0xF8, 0x3F, 0x00, 0x0F, 0xF1, 0xFE, 0x18,
    0x01, 0x80, 0x18, 0x03, 0xF8, 0x3F, 0xC3, 0x8E, 0x00, 0x60, 0x06, 0x00,
    0x60, 0x0C, 0xC1, 0xCF, 0xF8, 0x7E, 0x00, 0x03, 0xE1, 0xFC, 0x70, 0x1C,
    0x03, 0x00, 0xC0, 0x1B, 0xC7, 0xFC, 0xF3, 0x98, 0x33, 0x06, 0x60, 0xCE,
    0x30, 0xFC, 0x0F, 0x00, 0xFF, 0xFF, 0xFB, 0x07, 0x60, 0xC0, 0x38, 0x06,
    0x01, 0xC0, 0x30, 0x0E, 0x01, 0x80, 0x70, 0x1C, 0x03, 0x80, 0x60, 0x08,
    0x00, 0x07, 0x83, 0xF8, 0xE3, 0xB0, 0x36, 0x06, 0xC0, 0xDC, 0x31, 0xFC,
    0x3F, 0x8C, 0x3B, 0x03, 0x60, 0x6C, 0x39, 0xFE, 0x1F, 0x00, 0x07, 0x81,
    0xF8, 0x63, 0x98, 0x33, 0x06, 0x60, 0xCE, 0x79, 0xFF, 0x1E, 0xC0, 0x18,
    0x06, 0x01, 0xC0, 0x71, 0xFC, 0x3E, 0x00, 0x19, 0xCC, 0x00, 0x00, 0x00,
    0x67, 0x30, 0x06, 0x1C, 0x30, 0x00, 0x00, 0x00, 0x00, 0x38, 0x71, 0xC3,
    0x0E, 0x18, 0x20, 0x00, 0x00, 0x18, 0x03, 0xC0, 0x7C, 0x1F, 0x03, 0xE0,
    0x3E, 0x00, 0x7C, 0x01, 0xF0, 0x03, 0xE0, 0x07, 0x80, 0x08, 0x7F, 0xFB,
    0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFB, 0xFF, 0xC0, 0x30, 0x01,
    0xE0, 0x07, 0xC0, 0x0F, 0x00, 0x3E, 0x00, 0x7C, 0x1F, 0x03, 0xE0, 0x7C,
    0x07, 0x80, 0x20, 0x00, 0x3E, 0x7F, 0xB0, 0xF8, 0x30, 0x18, 0x1C, 0x1C,
    0x3C, 0x38, 0x18, 0x00, 0x06, 0x07, 0x03, 0x00, 0x03, 0xC0, 0x7E, 0x0C,
    0x71, 0x83, 0x30, 0x33, 0x0F, 0x33, 0xE6, 0x76, 0x6C, 0x66, 0xC6, 0x6C,
    0x6C, 0xFC, 0xC7, 0xEC, 0x00, 0xC0, 0x0C, 0x00, 0xE3, 0x07, 0xF0, 0x3C,
    0x00, 0x07, 0xF0, 0x1F, 0xE0, 0x07, 0xC0, 0x1F, 0x80, 0x3B, 0x00, 0xE7,
    0x01, 0x8E, 0x07, 0x1C, 0x1F, 0xF8, 0x3F, 0xF0, 0xE0, 0x71, 0x80, 0xEF,
    0xC7, 0xFF, 0x8F, 0xC0, 0x3F, 0xF1, 0xFF, 0xC3, 0x06, 0x38, 0x31, 0xC1,
    0x8C, 0x18, 0x7F, 0xC3, 0xFE, 0x38, 0x39, 0xC0, 0xCC, 0x06, 0x60, 0x6F,
    0xFF, 0x7F, 0xE0, 0x03, 0xEC, 0x3F, 0xF1, 0xC3, 0x8C, 0x06, 0x60, 0x19,
    0x80, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x0C, 0x03, 0x3C, 0x1C,
    0x7F, 0xE0, 0x7E, 0x00, 0x3F, 0xE1, 0xFF, 0x87, 0x0C, 0x30, 0x31, 0x81,
    0x8C, 0x0C, 0xE0, 0x67, 0x03, 0x30, 0x31, 0x81, 0x8C, 0x0C, 0xE1, 0xCF,
    0xFC, 0x7F, 0x80, 0x1F, 0xFE, 0x3F, 0xFC, 0x38, 0x38, 0x70, 0x70, 0xCC,
    0xC1, 0x98, 0x03, 0xF0, 0x0F, 0xE0, 0x1D, 0x80, 0x31, 0x18, 0x60, 0x70,
    0xC0, 0xE7, 0xFF, 0x9F, 0xFF, 0x00, 0x1F, 0xFF, 0x1F, 0xFE, 0x0E, 0x06,
    0x0C, 0x0E, 0x0C, 0xC4, 0x0C, 0xC0, 0x1F, 0xC0, 0x1F, 0xC0, 0x19, 0xC0,
    0x19, 0x80, 0x18, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x07, 0xEC,
    0x7F, 0xF3, 0x83, 0x9C, 0x06, 0x60, 0x19, 0x80, 0x0C, 0x00, 0x30, 0xFE,
    0xC3, 0xFB, 0x01, 0xCC, 0x07, 0x3C, 0x38, 0x7F, 0xE0, 0x7E, 0x00, 0x0F,
    0xBF, 0x1F, 0xBE, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x1C, 0x0C, 0x1C, 0x1F,
    0xF8, 0x1F, 0xF8, 0x18, 0x18, 0x18, 0x38, 0x18, 0x38, 0x38, 0x30, 0x7C,
    0xFC, 0xFC, 0xF8, 0x3F, 0xF3, 0xFF, 0x03, 0x00, 0x70, 0x07, 0x00, 0x60,
    0x06, 0x00, 0x60, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xC0, 0xFF, 0xCF, 0xFC,
    0x03, 0xFF, 0x03, 0xFF, 0x00, 0x38, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30,
    0x00, 0x70, 0x20, 0x70, 0x60, 0x60, 0x60, 0x60, 0x60, 0xE0, 0xE1, 0xC0,
    0xFF, 0x80, 0x3F, 0x00, 0x1F, 0x9F, 0x1F, 0x9E, 0x0E, 0x38, 0x0C, 0x70,
    0x0C, 0xE0, 0x0F, 0xC0, 0x1F, 0xC0, 0x1F, 0xE0, 0x1C, 0xE0, 0x18, 0x60,
    0x18, 0x70, 0x38, 0x70, 0xFE, 0x3C, 0xFC, 0x3C, 0x3F, 0xC1, 0xFE, 0x01,
    0x80, 0x1C, 0x00, 0xE0, 0x06, 0x00, 0x30, 0x01, 0x80, 0x1C, 0x18, 0xE0,
    0xC6, 0x06, 0x30, 0x7F, 0xFF, 0xFF, 0xF8, 0x1E, 0x07, 0x87, 0x81, 0xE0,
    0xF0, 0xF0, 0x7C, 0x7C, 0x1F, 0x1F, 0x06, 0xCF, 0x81, 0xBF, 0x60, 0xEF,
    0x98, 0x3B, 0xEE, 0x0C, 0x73, 0x83, 0x1C, 0xC0, 0xC0, 0x30, 0xFC, 0x7E,
    0x3F, 0x1F, 0x80, 0x3C, 0x3F, 0x3E, 0x3F, 0x1E, 0x0C, 0x1F, 0x1C, 0x1F,
    0x1C, 0x1B, 0x98, 0x3B, 0x98, 0x3B, 0x98, 0x31, 0xF8, 0x31, 0xF8, 0x30,
    0xF0, 0x70, 0xF0, 0xFC, 0x70, 0xF8, 0x70, 0x03, 0xE0, 0x3F, 0xE1, 0xC3,
    0x8C, 0x07, 0x60, 0x0D, 0x80, 0x3C, 0x00, 0xF0, 0x03, 0xC0, 0x1B, 0x00,
    0x6E, 0x03, 0x1C, 0x38, 0x7F, 0xC0, 0x7C, 0x00, 0x3F, 0xE1, 0xFF, 0x83,
    0x0E, 0x38, 0x31, 0xC1, 0x8C, 0x0C, 0x60, 0xC3, 0xFC, 0x3F, 0xC1, 0xC0,
    0x0C, 0x00, 0x60, 0x0F, 0xF0, 0x7F, 0x80, 0x03, 0xE0, 0x3F, 0xE1, 0xC3,
    0x8C, 0x07, 0x60, 0x0D, 0x80, 0x3C, 0x00, 0xF0, 0x03, 0xC0, 0x1B, 0x00,
    0x6E, 0x03, 0x1C, 0x38, 0x7F, 0xC0, 0xFC, 0x03, 0x02, 0x1F, 0xFC, 0xFF,
    0xE0, 0x1F, 0xF0, 0x3F, 0xF0, 0x38, 0x70, 0x60, 0x60, 0xC0, 0xC1, 0x87,
    0x07, 0xFC, 0x0F, 0xF0, 0x18, 0xF0, 0x30, 0xE0, 0x60, 0xC1, 0xC1, 0xCF,
    0xE1, 0xFF, 0xC3, 0xC0, 0x0F, 0xB1, 0xFF, 0x30, 0xE6, 0x06, 0x60, 0x67,
    0x80, 0x7F, 0x01, 0xFC, 0x01, 0xC4, 0x0C, 0xC0, 0xCE, 0x18, 0xFF, 0x8B,
    0xE0, 0x7F, 0xFB, 0xFF, 0xD9, 0xCF, 0xCE, 0x7C, 0x63, 0x63, 0x18, 0x18,
    0x01, 0xC0, 0x0E, 0x00, 0x60, 0x03, 0x00, 0x18, 0x0F, 0xF8, 0x7F, 0xC0,
    0x7E, 0xFF, 0xF3, 0xF3, 0x03, 0x1C, 0x0C, 0x60, 0x31, 0x81, 0xC6, 0x06,
    0x38, 0x18, 0xE0, 0x63, 0x03, 0x8C, 0x0C, 0x30, 0x70, 0x7F, 0x80, 0xF8,
    0x00, 0xFC, 0x7F, 0xF8, 0xFD, 0xC0, 0x61, 0x81, 0xC3, 0x87, 0x07, 0x0C,
    0x0E, 0x38, 0x0C, 0x60, 0x19, 0xC0, 0x3F, 0x00, 0x7C, 0x00, 0xF8, 0x00,
    0xE0, 0x01, 0x80, 0x00, 0x7E, 0x7E, 0xFC, 0xFD, 0xC0, 0x73, 0x9C, 0xE7,
    0x79, 0x8E, 0xF7, 0x1B, 0xEE, 0x36, 0xD8, 0x7D, 0xF0, 0xF3, 0xE1, 0xE7,
    0x83, 0x8F, 0x07, 0x1E, 0x1C, 0x38, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x0E,
    0x1C, 0x07, 0x38, 0x07, 0x70, 0x03, 0xE0, 0x03, 0xC0, 0x03, 0xC0, 0x07,
    0xE0, 0x0E, 0xE0, 0x1C, 0x70, 0x38, 0x70, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8,
    0xFF, 0xC7, 0xCC, 0x38, 0x73, 0x83, 0x9C, 0x0F, 0xC0, 0x7C, 0x01, 0xC0,
    0x0C, 0x00, 0x60, 0x03, 0x00, 0x38, 0x0F, 0xF8, 0x7F, 0x80, 0x0F, 0xF8,
    0x7F, 0xE1, 0xC7, 0x86, 0x1C, 0x18, 0xE0, 0x07, 0x00, 0x38, 0x01, 0xC0,
    0x0E, 0x00, 0x70, 0xC3, 0x83, 0x1C, 0x1C, 0x7F, 0xF3, 0xFF, 0x80, 0x0F,
    0x87, 0xC3, 0x03, 0x81, 0xC0, 0xC0, 0x60, 0x30, 0x38, 0x1C, 0x0C, 0x06,
    0x03, 0x03, 0x81, 0xC0, 0xC0, 0x60, 0x3E, 0x3F, 0x00, 0x41, 0xC3, 0x83,
    0x07, 0x0E, 0x1C, 0x18, 0x38, 0x70, 0xE0, 0xC1, 0xC3, 0x83, 0x06, 0x0E,
    0x1C, 0x18, 0x20, 0x1F, 0x0F, 0x80, 0xC0, 0xE0, 0x70, 0x30, 0x18, 0x0C,
    0x0E, 0x07, 0x03, 0x01, 0x80, 0xC0, 0xE0, 0x70, 0x30, 0x18, 0x7C, 0x3E,
    0x00, 0x02, 0x01, 0x80, 0xF0, 0x7E, 0x3B, 0x9C, 0x7E, 0x1F, 0x03, 0xFF,
    0xFF, 0xFF, 0xFC, 0xCE, 0x73, 0x1F, 0xC3, 0xFE, 0x00, 0x60, 0x06, 0x0F,
    0xE3, 0xFE, 0x70, 0xCC, 0x0C, 0xC3, 0xCF, 0xFF, 0x7F, 0xF0, 0x1E, 0x00,
    0x3C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xDF, 0x81, 0xFF, 0x83, 0xC3, 0x8F,
    0x03, 0x1C, 0x06, 0x38, 0x0C, 0x70, 0x18, 0xE0, 0x63, 0xE1, 0x9F, 0xFE,
    0x3D, 0xF8, 0x00, 0x0F, 0xF3, 0xFF, 0x30, 0x76, 0x07, 0xE0, 0x6C, 0x00,
    0xC0, 0x0C, 0x00, 0xE0, 0x67, 0xFE, 0x3F, 0x80, 0x00, 0x3C, 0x00, 0xF0,
    0x01, 0xC0, 0x06, 0x07, 0xD8, 0x7F, 0xE3, 0x0F, 0x98, 0x1E, 0x60, 0x73,
    0x01, 0xCC, 0x07, 0x30, 0x3C, 0xE1, 0xF1, 0xFF, 0xE3, 0xF7, 0x80, 0x0F,
    0xC1, 0xFE, 0x78, 0x76, 0x03, 0xFF, 0xFF, 0xFF, 0xC0, 0x0C, 0x00, 0xE0,
    0xE7, 0xFE, 0x1F, 0x80, 0x00, 0xFC, 0x07, 0xF8, 0x0C, 0x00, 0x38, 0x01,
    0xFF, 0x07, 0xFE, 0x01, 0x80, 0x07, 0x00, 0x0E, 0x00, 0x18, 0x00, 0x30,
    0x00, 0x60, 0x01, 0xC0, 0x1F, 0xF8, 0x3F, 0xF0, 0x00, 0x0F, 0xBC, 0x7F,
    0xF3, 0x0F, 0x18, 0x1C, 0xC0, 0x73, 0x01, 0x8C, 0x0E, 0x30, 0x38, 0xE3,
    0xE1, 0xFF, 0x83, 0xEC, 0x00, 0x30, 0x01, 0xC0, 0x06, 0x07, 0xF0, 0x1F,
    0x80, 0x1E, 0x01, 0xF0, 0x03, 0x00, 0x18, 0x00, 0xDE, 0x0F, 0xF8, 0x78,
    0xC3, 0x86, 0x18, 0x30, 0xC1, 0x8E, 0x1C, 0x70, 0xE3, 0x06, 0x7E, 0xFF,
    0xE7, 0xE0, 0x03, 0x80, 0x70, 0x00, 0x0F, 0xC1, 0xF0, 0x06, 0x00, 0xC0,
    0x38, 0x07, 0x00, 0xC0, 0x18, 0x03, 0x0F, 0xFF, 0xFF, 0xC0, 0x00, 0x70,
    0x07, 0x00, 0x00, 0xFF, 0x1F, 0xF0, 0x07, 0x00, 0x70, 0x06, 0x00, 0x60,
    0x06, 0x00, 0xE0, 0x0E, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x1C, 0x03, 0x87,
    0xF0, 0xFE, 0x00, 0x1E, 0x00, 0x78, 0x00, 0xE0, 0x03, 0x80, 0x0C, 0xFC,
    0x33, 0xE0, 0xDE, 0x07, 0xE0, 0x1F, 0x00, 0x7C, 0x01, 0xF8, 0x06, 0xF0,
    0x39, 0xC3, 0xE7, 0xEF, 0x1F, 0x80, 0x0F, 0x81, 0xF0, 0x06, 0x01, 0xC0,
    0x38, 0x06, 0x00, 0xC0, 0x18, 0x07, 0x00, 0xE0, 0x18, 0x03, 0x00, 0x61,
    0xFF, 0xFF, 0xF8, 0x3F, 0xBC, 0x7F, 0xFC, 0xF3, 0x98, 0xC6, 0x33, 0x9C,
    0xE7, 0x39, 0xCC, 0x63, 0x18, 0xC6, 0x31, 0x8D, 0xF7, 0xBF, 0xEF, 0x78,
    0x3D, 0xE1, 0xFF, 0x8F, 0x8C, 0x38, 0x61, 0x83, 0x0C, 0x18, 0xE1, 0xC7,
    0x0E, 0x30, 0x67, 0xEF, 0xFE, 0x7E, 0x07, 0xC1, 0xFE, 0x38, 0x76, 0x03,
    0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x06, 0xE1, 0xC7, 0xF8, 0x3E, 0x00, 0x1E,
    0xFC, 0x1F, 0xFE, 0x0F, 0x87, 0x0F, 0x03, 0x0E, 0x03, 0x0E, 0x03, 0x0E,
    0x07, 0x0E, 0x06, 0x1F, 0x0C, 0x1F, 0xF8, 0x19, 0xF0, 0x18, 0x00, 0x18,
    0x00, 0x38, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0x0F, 0xDE, 0x3F, 0xFC, 0xC3,
    0xE3, 0x03, 0x84, 0x07, 0x18, 0x0E, 0x30, 0x1C, 0x60, 0x78, 0xE1, 0xE0,
    0xFF, 0xC0, 0xF9, 0x80, 0x03, 0x00, 0x0E, 0x00, 0x1C, 0x01, 0xFC, 0x03,
    0xF8, 0x1E, 0x78, 0x7F, 0xF0, 0x7C, 0xC3, 0xC0, 0x0E, 0x00, 0x30, 0x00,
    0xC0, 0x03, 0x00, 0x1C, 0x03, 0xFF, 0x0F, 0xFC, 0x00, 0x07, 0xF1, 0xFF,
    0x30, 0x73, 0x86, 0x3F, 0x81, 0xFE, 0x03, 0xE6, 0x06, 0xE0, 0xEF, 0xFC,
    0xFF, 0x00, 0x0C, 0x07, 0x01, 0x83, 0xFF, 0xFF, 0xCE, 0x03, 0x00, 0xC0,
    0x30, 0x1C, 0x07, 0x01, 0x83, 0x7F, 0xCF, 0xC0, 0xF0, 0xFF, 0x1F, 0x60,
    0x76, 0x07, 0x60, 0x76, 0x06, 0x60, 0x66, 0x0E, 0x61, 0xE7, 0xFF, 0x3E,
    0xF0, 0x7E, 0x7E, 0xFC, 0xFC, 0xE0, 0xC0, 0xC3, 0x81, 0x86, 0x03, 0x98,
    0x07, 0x70, 0x06, 0xC0, 0x0F, 0x80, 0x1E, 0x00, 0x38, 0x00, 0xF8, 0x7F,
    0xE3, 0xE6, 0x63, 0x1B, 0xDC, 0x6F, 0x61, 0xFF, 0x87, 0xFC, 0x1E, 0xF0,
    0x73, 0x81, 0xCE, 0x06, 0x38, 0x00, 0x3E, 0x7C, 0xF9, 0xF1, 0xE7, 0x03,
    0xF8, 0x07, 0xC0, 0x1F, 0x01, 0xFC, 0x0F, 0x38, 0x78, 0xFB, 0xF7, 0xEF,
    0x9F, 0x80, 0x1F, 0x1F, 0x3E, 0x1F, 0x1C, 0x1C, 0x0C, 0x18, 0x0E, 0x38,
    0x0E, 0x70, 0x06, 0x60, 0x07, 0xE0, 0x07, 0xC0, 0x07, 0xC0, 0x03, 0x80,
    0x07, 0x00, 0x07, 0x00, 0x0E, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x1F, 0xF1,
    0xFF, 0x38, 0xE3, 0x1C, 0x03, 0x80, 0x70, 0x0E, 0x01, 0xC6, 0x38, 0x67,
    0xFE, 0x7F, 0xE0, 0x01, 0xC0, 0xF0, 0x70, 0x18, 0x06, 0x03, 0x80, 0xE0,
    0x30, 0x1C, 0x3E, 0x0F, 0x00, 0x60, 0x18, 0x06, 0x03, 0x80, 0xC0, 0x30,
    0x0F, 0x01, 0xC0, 0x0C, 0x71, 0xC7, 0x18, 0x63, 0x8E, 0x30, 0xC3, 0x1C,
    0x71, 0x86, 0x38, 0xE3, 0x04, 0x00, 0x0E, 0x07, 0x80, 0xC0, 0x60, 0x70,
    0x30, 0x18, 0x0C, 0x06, 0x01, 0xC1, 0xE1, 0xC0, 0xC0, 0xE0, 0x70, 0x30,
    0x38, 0x78, 0x38, 0x00, 0x3C, 0x27, 0xE6, 0xEF, 0xCC, 0x38};

const GFXglyph FreeMonoBoldOblique12pt7bGlyphs[] = {
    {0, 0, 0, 14, 0, 1},         // 0x20 ' '
    {0, 6, 15, 14, 6, -14},      // 0x21 '!'
    {12, 8, 7, 14, 6, -13},      // 0x22 '"'
    {19, 13, 18, 14, 2, -15},    // 0x23 '#'
    {49, 11, 20, 14, 3, -16},    // 0x24 '$'
    {77, 11, 15, 14, 3, -14},    // 0x25 '%'
    {98, 11, 13, 14, 2, -12},    // 0x26 '&'
    {116, 3, 7, 14, 8, -13},     // 0x27 '''
    {119, 7, 19, 14, 7, -14},    // 0x28 '('
    {136, 7, 19, 14, 2, -14},    // 0x29 ')'
    {153, 11, 10, 14, 4, -14},   // 0x2A '*'
    {167, 12, 13, 14, 3, -12},   // 0x2B '+'
    {187, 6, 7, 14, 3, -2},      // 0x2C ','
    {193, 13, 2, 14, 2, -7},     // 0x2D '-'
    {197, 3, 3, 14, 6, -2},      // 0x2E '.'
    {199, 14, 20, 14, 2, -16},   // 0x2F '/'
    {234, 11, 15, 14, 3, -14},   // 0x30 '0'
    {255, 11, 15, 14, 2, -14},   // 0x31 '1'
    {276, 13, 15, 14, 1, -14},   // 0x32 '2'
    {301, 12, 15, 14, 2, -14},   // 0x33 '3'
    {324, 11, 14, 14, 3, -13},   // 0x34 '4'
    {344, 12, 15, 14, 2, -14},   // 0x35 '5'
    {367, 11, 15, 14, 4, -14},   // 0x36 '6'
    {388, 11, 15, 14, 4, -14},   // 0x37 '7'
    {409, 11, 15, 14, 3, -14},   // 0x38 '8'
    {430, 11, 15, 14, 3, -14},   // 0x39 '9'
    {451, 5, 11, 14, 5, -10},    // 0x3A ':'
    {458, 7, 15, 14, 3, -10},    // 0x3B ';'
    {472, 13, 11, 14, 2, -11},   // 0x3C '<'
    {490, 13, 7, 14, 2, -9},     // 0x3D '='
    {502, 13, 11, 14, 2, -11},   // 0x3E '>'
    {520, 9, 14, 14, 5, -13},    // 0x3F '?'
    {536, 12, 19, 14, 2, -14},   // 0x40 '@'
    {565, 15, 14, 14, 0, -13},   // 0x41 'A'
    {592, 13, 14, 14, 1, -13},   // 0x42 'B'
    {615, 14, 14, 14, 2, -13},   // 0x43 'C'
    {640, 13, 14, 14, 1, -13},   // 0x44 'D'
    {663, 15, 14, 14, 0, -13},   // 0x45 'E'
    {690, 16, 14, 14, 0, -13},   // 0x46 'F'
    {718, 14, 14, 14, 1, -13},   // 0x47 'G'
    {743, 16, 14, 14, 0, -13},   // 0x48 'H'
    {771, 12, 14, 14, 2, -13},   // 0x49 'I'
    {792, 16, 14, 14, 0, -13},   // 0x4A 'J'
    {820, 16, 14, 14, 0, -13},   // 0x4B 'K'
    {848, 13, 14, 14, 1, -13},   // 0x4C 'L'
    {871, 18, 14, 14, 0, -13},   // 0x4D 'M'
    {903, 16, 14, 14, 1, -13},   // 0x4E 'N'
    {931, 14, 14, 14, 1, -13},   // 0x4F 'O'
    {956, 13, 14, 14, 1, -13},   // 0x50 'P'
    {979, 14, 17, 14, 1, -13},   // 0x51 'Q'
    {1009, 15, 14, 14, 0, -13},  // 0x52 'R'
    {1036, 12, 14, 14, 3, -13},  // 0x53 'S'
    {1057, 13, 14, 14, 2, -13},  // 0x54 'T'
    {1080, 14, 14, 14, 2, -13},  // 0x55 'U'
    {1105, 15, 14, 14, 1, -13},  // 0x56 'V'
    {1132, 15, 14, 14, 1, -13},  // 0x57 'W'
    {1159, 16, 14, 14, 0, -13},  // 0x58 'X'
    {1187, 13, 14, 14, 2, -13},  // 0x59 'Y'
    {1210, 14, 14, 14, 1, -13},  // 0x5A 'Z'
    {1235, 9, 19, 14, 5, -14},   // 0x5B '['
    {1257, 7, 20, 14, 5, -16},   // 0x5C '\'
    {1275, 9, 19, 14, 3, -14},   // 0x5D ']'
    {1297, 10, 8, 14, 4, -15},   // 0x5E '^'
    {1307, 15, 2, 14, -1, 4},    // 0x5F '_'
    {1311, 4, 4, 14, 7, -15},    // 0x60 '`'
    {1313, 12, 11, 14, 2, -10},  // 0x61 'a'
    {1330, 15, 15, 14, -1, -14}, // 0x62 'b'
    {1359, 12, 11, 14, 2, -10},  // 0x63 'c'
    {1376, 14, 15, 14, 2, -14},  // 0x64 'd'
    {1403, 12, 11, 14, 2, -10},  // 0x65 'e'
    {1420, 15, 15, 14, 2, -14},  // 0x66 'f'
    {1449, 14, 16, 14, 2, -10},  // 0x67 'g'
    {1477, 13, 15, 14, 1, -14},  // 0x68 'h'
    {1502, 11, 14, 14, 2, -13},  // 0x69 'i'
    {1522, 12, 19, 14, 1, -13},  // 0x6A 'j'
    {1551, 14, 15, 14, 1, -14},  // 0x6B 'k'
    {1578, 11, 15, 14, 2, -14},  // 0x6C 'l'
    {1599, 15, 11, 14, 0, -10},  // 0x6D 'm'
    {1620, 13, 11, 14, 1, -10},  // 0x6E 'n'
    {1638, 12, 11, 14, 2, -10},  // 0x6F 'o'
    {1655, 16, 16, 14, -1, -10}, // 0x70 'p'
    {1687, 15, 16, 14, 1, -10},  // 0x71 'q'
    {1717, 14, 11, 14, 1, -10},  // 0x72 'r'
    {1737, 12, 11, 14, 2, -10},  // 0x73 's'
    {1754, 10, 14, 14, 2, -13},  // 0x74 't'
    {1772, 12, 11, 14, 2, -10},  // 0x75 'u'
    {1789, 15, 11, 14, 1, -10},  // 0x76 'v'
    {1810, 14, 11, 14, 2, -10},  // 0x77 'w'
    {1830, 14, 11, 14, 1, -10},  // 0x78 'x'
    {1850, 16, 16, 14, 0, -10},  // 0x79 'y'
    {1882, 12, 11, 14, 2, -10},  // 0x7A 'z'
    {1899, 10, 19, 14, 4, -14},  // 0x7B '{'
    {1923, 6, 19, 14, 5, -14},   // 0x7C '|'
    {1938, 9, 19, 14, 3, -14},   // 0x7D '}'
    {1960, 12, 4, 14, 3, -7}};   // 0x7E '~'

const GFXfont FreeMonoBoldOblique12pt7b = {
    (uint8_t *)FreeMonoBoldOblique12pt7bBitmaps,
    (GFXglyph *)FreeMonoBoldOblique12pt7bGlyphs, 0x20, 0x7E, 24};

extern EpaperWeAct_Driver_t epaper;

class Font_t
{
public:
    uint8_t *m_bitmap;
    GFXglyph *m_glyph;
    uint16_t m_first;
    uint16_t m_last;
    uint8_t m_y_advance;

    int m_cur_x;
    int m_cur_y;
    int m_cache_x_pos;
    int m_cache_y_pos;

public:
    static const uint32_t MAX_FONTS_HEIGHT = 32;
    uint8_t m_cache[MAX_FONTS_HEIGHT];

    Font_t(GFXfont font)
    {
        m_bitmap = font.bitmap;
        m_glyph = font.glyph;
        m_first = font.first;
        m_last = font.last;
        m_y_advance = font.yAdvance;
        m_cache_x_pos = 0;
        m_cache_y_pos = 0;
        set_cursor(0, 0);
        memset(m_cache, 0xFF, sizeof(m_cache));
    }

    uint32_t get_space_x_advance()
    {
        int space_idx = ' ' - m_first;
        if (space_idx < 0 || space_idx > m_last)
            return m_glyph[0].xAdvance;
        return m_glyph[space_idx].xAdvance;
    }

    uint32_t get_y_advance()
    {
        return m_y_advance;
    }

    uint32_t get_x_pos_in_pixels(uint32_t x_pos)
    {
        return x_pos * get_space_x_advance();
    }

    uint32_t get_y_pos_in_pixels(uint32_t y_pos)
    {
        return (y_pos + 1) * get_y_advance() - 1;
    }

    void set_cursor_in_pixels(int x, int y)
    {
        m_cur_x = x;
        m_cur_y = y;
    }

    void set_cursor(int x, int y)
    {
        m_cur_x = get_x_pos_in_pixels(x);
        m_cur_y = get_y_pos_in_pixels(y);
    }

    void move_cursor_next_line()
    {
        m_cur_y += get_y_advance();
    }

    int get_x_advance(char c)
    {
        int idx = c - m_first;
        if (idx < 0 || idx > m_last)
            return get_space_x_advance();
        return m_glyph[idx].xAdvance;
    }

    void move_cursor_next_char(char c)
    {
        m_cur_x += get_x_advance(c);
    }

    void draw_char(char c, bool invert = false)
    {
        int idx = c - m_first;
        if (idx < 0 || idx > m_last)
        {
            move_cursor_next_char(c);
            memset(m_cache, 0, sizeof(m_cache));
            return;
        }
        
        GFXglyph glyph = m_glyph[idx];
        uint8_t *bitmap = m_bitmap + glyph.bitmapOffset;
        uint8_t w = glyph.width;
        uint8_t h = glyph.height;
        int16_t xo = glyph.xOffset;
        int16_t yo = glyph.yOffset;
        uint8_t xx, yy, bits = 0, bit = 0;

        if ((m_cur_x + xo) / 8 != m_cache_x_pos / 8)
        {
            memset(m_cache, 0xFF, sizeof(m_cache));
            m_cache_x_pos = (m_cur_x + xo) / 8 * 8;
        }

        for (yy = 0; yy < h; yy++)
        {
            for (xx = 0; xx < w; xx++)
            {
                if (!bit)
                {
                    bits = *bitmap++;
                    bit = 0x80;
                }
                bool is_pixel_set = ((bits & bit) != 0) ^ invert;
                int x_pos = m_cur_x + xo + xx;
                int cache_y_pos = get_y_advance() + yo + yy;
                if (is_pixel_set)
                {
                    // draw pixel
                    m_cache[cache_y_pos] &= ~(1U << (7 - (x_pos & 0x07)));
                }
                else
                {
                    // clear pixel
                    m_cache[cache_y_pos] |= 1U << (7 - (x_pos & 0x07));
                }

                if ((x_pos & 0x07) == 0x07)
                {
                    // move to next byte
                    // output to display
                    int mem_x = x_pos / 8;
                    int mem_y = m_cur_y + yo + yy;
                    epaper.mem_write(mem_x, mem_y, m_cache[cache_y_pos]);
                    m_cache[cache_y_pos] = 0xFF;
                }
                bit >>= 1;
            }
        }

        int old_x_pos = m_cur_x + xo + w;
        m_cache_x_pos = old_x_pos / 8 * 8;
        
        int mem_x = m_cache_x_pos / 8;
        for (yy = 0; yy < h; yy++)
        {
            int mem_y = m_cur_y + yo + yy;
            int cache_y_pos = get_y_advance() + yo + yy;
            epaper.mem_write(mem_x, mem_y, m_cache[cache_y_pos]);
        }

        move_cursor_next_char(c);
    }

    void draw_string(const char *str)
    {
        while (*str)
        {
            draw_char(*str);
            str++;
        }
    }
};

class TextRenderer_t
{
protected:
    Font_t &m_font;
    int m_width;
    int m_height;
    int m_x;
    int m_y;

public:
    TextRenderer_t(Font_t &font, int width, int height);
    void set_position(int x, int y);
    void next_line();
    virtual void draw_char(char c) = 0;
    virtual void draw_string(const char *str, int len) = 0;
    void draw_string(const char *str);
    int draw_text(const char *str);
    int get_num_chars_in_line(const char *str);
    int get_width() { return m_width; }
    int get_height() { return m_height; }
};

TextRenderer_t::TextRenderer_t(Font_t &font, int width, int height)
    : m_font(font)
    , m_width(width)
    , m_height(height)
    , m_x(0)
    , m_y(0)
{
}

void TextRenderer_t::set_position(int x, int y)
{
    m_x = x;
    m_y = y;
}

void TextRenderer_t::next_line()
{
    m_x = 0;
    m_y += m_font.get_y_advance();
}

void TextRenderer_t::draw_string(const char *str)
{
    int len = strlen(str);
    draw_string(str, len);
}

int TextRenderer_t::get_num_chars_in_line(const char *str)
{
    int num_chars = 0;
    int x_pos = 0;
    while (*str && *str != '\n' && *str != '\r' && x_pos + m_font.get_x_advance(*str) <= m_width)
    {
        x_pos += m_font.get_x_advance(*str);
        num_chars++;
        str++;
    }
    while (*str == '\r' || *str == '\n')
    {
        str++;
        num_chars++;
    }
    return num_chars;
}

int TextRenderer_t::draw_text(const char *str)
{
    int num_lines = m_height / m_font.get_y_advance();
    int line = 0;
    int num_chars_total = 0;
    
    set_position(0, m_font.get_y_advance());
    while (*str && line < num_lines)
    {
        int num_chars = get_num_chars_in_line(str);
        draw_string(str, num_chars);
        next_line();
        str += num_chars;
        num_chars_total += num_chars;
        line++;
    }
    return num_chars_total;
}

class TextRendererWithBinaryBuffer_t : public TextRenderer_t
{
    BinaryScreenBuffer_t &m_buf;

    int m_cache_x_pos;
    uint8_t m_cache[Font_t::MAX_FONTS_HEIGHT];

public:
    TextRendererWithBinaryBuffer_t(BinaryScreenBuffer_t &buf, Font_t &font);

    virtual void draw_char(char c);
    virtual void draw_string(const char *str, int len);

    void move_cursor_next_char(char c)
    {
        m_x += m_font.get_x_advance(c);
    }
};

TextRendererWithBinaryBuffer_t::TextRendererWithBinaryBuffer_t(BinaryScreenBuffer_t &buf, Font_t &font)
    : TextRenderer_t(font, buf.get_width(), buf.get_height())
    , m_buf(buf)
{
    memset(m_cache, 0xFF, sizeof(m_cache));
}


void TextRendererWithBinaryBuffer_t::draw_char(char c)
{
    if (c == '\n' || c == '\r')
    {
        memset(m_cache, 0xFF, sizeof(m_cache));
        return;
    }
    int idx = c - m_font.m_first;
    if (idx < 0 || idx > m_font.m_last)
    {
        move_cursor_next_char(c);
        memset(m_cache, 0xFF, sizeof(m_cache));
        return;
    }
    
    GFXglyph glyph = m_font.m_glyph[idx];
    uint8_t *bitmap = m_font.m_bitmap + glyph.bitmapOffset;
    uint8_t w = glyph.width;
    uint8_t h = glyph.height;
    int16_t xo = glyph.xOffset;
    int16_t yo = glyph.yOffset;
    uint8_t xx, yy, bits = 0, bit = 0;

    if ((m_x + xo) / 8 != m_cache_x_pos / 8)
    {
        memset(m_cache, 0xFF, sizeof(m_cache));
        m_cache_x_pos = (m_x + xo) / 8 * 8;
    }

    for (yy = 0; yy < h; yy++)
    {
        for (xx = 0; xx < w; xx++)
        {
            if (!bit)
            {
                bits = *bitmap++;
                bit = 0x80;
            }
            bool is_pixel_set = ((bits & bit) != 0);
            int x_pos = m_x + xo + xx;
            int cache_y_pos = m_font.get_y_advance() + yo + yy;
            if (is_pixel_set)
            {
                // draw pixel
                m_cache[cache_y_pos] &= ~(1U << (7 - (x_pos & 0x07)));
            }
            else
            {
                // clear pixel
                m_cache[cache_y_pos] |= 1U << (7 - (x_pos & 0x07));
            }

            if ((x_pos & 0x07) == 0x07)
            {
                // move to next byte
                // output to display
                int mem_x = x_pos / 8;
                int mem_y = m_y + yo + yy;
                m_buf.mem_write(mem_x, mem_y, m_cache[cache_y_pos]);
                m_cache[cache_y_pos] = 0xFF;
            }
            bit >>= 1;
        }
    }

    int old_x_pos = m_x + xo + w;
    m_cache_x_pos = old_x_pos / 8 * 8;
    
    int mem_x = m_cache_x_pos / 8;
    for (yy = 0; yy < h; yy++)
    {
        int mem_y = m_y + yo + yy;
        int cache_y_pos = m_font.get_y_advance() + yo + yy;
        m_buf.mem_write(mem_x, mem_y, m_cache[cache_y_pos]);
    }

    move_cursor_next_char(c);
}

void TextRendererWithBinaryBuffer_t::draw_string(const char *str, int len)
{
    while (*str && len > 0)
    {
        draw_char(*str++);
        len--;
    }
}
